//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace lab2Erecept.ClientFunctionalityReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientFunctionalityReference.IFilter")]
    public interface IFilter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/GetTestData", ReplyAction="http://tempuri.org/IFilter/GetTestDataResponse")]
        void GetTestData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/GetTestData", ReplyAction="http://tempuri.org/IFilter/GetTestDataResponse")]
        System.Threading.Tasks.Task GetTestDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/GetAllInterchanges", ReplyAction="http://tempuri.org/IFilter/GetAllInterchangesResponse")]
        void GetAllInterchanges();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/GetAllInterchanges", ReplyAction="http://tempuri.org/IFilter/GetAllInterchangesResponse")]
        System.Threading.Tasks.Task GetAllInterchangesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/FilterByInterchangeID", ReplyAction="http://tempuri.org/IFilter/FilterByInterchangeIDResponse")]
        void FilterByInterchangeID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/FilterByInterchangeID", ReplyAction="http://tempuri.org/IFilter/FilterByInterchangeIDResponse")]
        System.Threading.Tasks.Task FilterByInterchangeIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/FilterByInterchangeNode", ReplyAction="http://tempuri.org/IFilter/FilterByInterchangeNodeResponse")]
        void FilterByInterchangeNode(string node);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/FilterByInterchangeNode", ReplyAction="http://tempuri.org/IFilter/FilterByInterchangeNodeResponse")]
        System.Threading.Tasks.Task FilterByInterchangeNodeAsync(string node);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/FilterByInterchangeIDandNode", ReplyAction="http://tempuri.org/IFilter/FilterByInterchangeIDandNodeResponse")]
        void FilterByInterchangeIDandNode(int id, string node);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/FilterByInterchangeIDandNode", ReplyAction="http://tempuri.org/IFilter/FilterByInterchangeIDandNodeResponse")]
        System.Threading.Tasks.Task FilterByInterchangeIDandNodeAsync(int id, string node);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/FilterByInterchangeNodeValue", ReplyAction="http://tempuri.org/IFilter/FilterByInterchangeNodeValueResponse")]
        void FilterByInterchangeNodeValue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/FilterByInterchangeNodeValue", ReplyAction="http://tempuri.org/IFilter/FilterByInterchangeNodeValueResponse")]
        System.Threading.Tasks.Task FilterByInterchangeNodeValueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/Method1", ReplyAction="http://tempuri.org/IFilter/Method1Response")]
        System.Xml.Linq.XElement Method1();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/Method1", ReplyAction="http://tempuri.org/IFilter/Method1Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> Method1Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/Method2", ReplyAction="http://tempuri.org/IFilter/Method2Response")]
        System.Xml.Linq.XElement Method2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilter/Method2", ReplyAction="http://tempuri.org/IFilter/Method2Response")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> Method2Async();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFilterChannel : lab2Erecept.ClientFunctionalityReference.IFilter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilterClient : System.ServiceModel.ClientBase<lab2Erecept.ClientFunctionalityReference.IFilter>, lab2Erecept.ClientFunctionalityReference.IFilter {
        
        public FilterClient() {
        }
        
        public FilterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FilterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FilterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FilterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void GetTestData() {
            base.Channel.GetTestData();
        }
        
        public System.Threading.Tasks.Task GetTestDataAsync() {
            return base.Channel.GetTestDataAsync();
        }
        
        public void GetAllInterchanges() {
            base.Channel.GetAllInterchanges();
        }
        
        public System.Threading.Tasks.Task GetAllInterchangesAsync() {
            return base.Channel.GetAllInterchangesAsync();
        }
        
        public void FilterByInterchangeID(int id) {
            base.Channel.FilterByInterchangeID(id);
        }
        
        public System.Threading.Tasks.Task FilterByInterchangeIDAsync(int id) {
            return base.Channel.FilterByInterchangeIDAsync(id);
        }
        
        public void FilterByInterchangeNode(string node) {
            base.Channel.FilterByInterchangeNode(node);
        }
        
        public System.Threading.Tasks.Task FilterByInterchangeNodeAsync(string node) {
            return base.Channel.FilterByInterchangeNodeAsync(node);
        }
        
        public void FilterByInterchangeIDandNode(int id, string node) {
            base.Channel.FilterByInterchangeIDandNode(id, node);
        }
        
        public System.Threading.Tasks.Task FilterByInterchangeIDandNodeAsync(int id, string node) {
            return base.Channel.FilterByInterchangeIDandNodeAsync(id, node);
        }
        
        public void FilterByInterchangeNodeValue() {
            base.Channel.FilterByInterchangeNodeValue();
        }
        
        public System.Threading.Tasks.Task FilterByInterchangeNodeValueAsync() {
            return base.Channel.FilterByInterchangeNodeValueAsync();
        }
        
        public System.Xml.Linq.XElement Method1() {
            return base.Channel.Method1();
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> Method1Async() {
            return base.Channel.Method1Async();
        }
        
        public System.Xml.Linq.XElement Method2() {
            return base.Channel.Method2();
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> Method2Async() {
            return base.Channel.Method2Async();
        }
    }
}
